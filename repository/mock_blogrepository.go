// Code generated by mockery v2.50.2. DO NOT EDIT.

package repository

import (
	context "context"

	model "github.com/iqunlim/easyblog/model"
	mock "github.com/stretchr/testify/mock"
)

// MockBlogRepository is an autogenerated mock type for the BlogRepository type
type MockBlogRepository struct {
	mock.Mock
}

type MockBlogRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBlogRepository) EXPECT() *MockBlogRepository_Expecter {
	return &MockBlogRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockBlogRepository) Delete(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBlogRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockBlogRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockBlogRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockBlogRepository_Delete_Call {
	return &MockBlogRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockBlogRepository_Delete_Call) Run(run func(ctx context.Context, id int)) *MockBlogRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockBlogRepository_Delete_Call) Return(_a0 error) *MockBlogRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlogRepository_Delete_Call) RunAndReturn(run func(context.Context, int) error) *MockBlogRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx, fields
func (_m *MockBlogRepository) GetAll(ctx context.Context, fields []string) ([]*model.BlogPost, error) {
	ret := _m.Called(ctx, fields)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*model.BlogPost
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]*model.BlogPost, error)); ok {
		return rf(ctx, fields)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []*model.BlogPost); ok {
		r0 = rf(ctx, fields)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.BlogPost)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, fields)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlogRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockBlogRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - fields []string
func (_e *MockBlogRepository_Expecter) GetAll(ctx interface{}, fields interface{}) *MockBlogRepository_GetAll_Call {
	return &MockBlogRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx, fields)}
}

func (_c *MockBlogRepository_GetAll_Call) Run(run func(ctx context.Context, fields []string)) *MockBlogRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockBlogRepository_GetAll_Call) Return(_a0 []*model.BlogPost, _a1 error) *MockBlogRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlogRepository_GetAll_Call) RunAndReturn(run func(context.Context, []string) ([]*model.BlogPost, error)) *MockBlogRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByFilter provides a mock function with given fields: ctx, queryparam, fields
func (_m *MockBlogRepository) GetByFilter(ctx context.Context, queryparam string, fields []string) ([]*model.BlogPost, error) {
	ret := _m.Called(ctx, queryparam, fields)

	if len(ret) == 0 {
		panic("no return value specified for GetByFilter")
	}

	var r0 []*model.BlogPost
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) ([]*model.BlogPost, error)); ok {
		return rf(ctx, queryparam, fields)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) []*model.BlogPost); ok {
		r0 = rf(ctx, queryparam, fields)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.BlogPost)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(ctx, queryparam, fields)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlogRepository_GetByFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByFilter'
type MockBlogRepository_GetByFilter_Call struct {
	*mock.Call
}

// GetByFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - queryparam string
//   - fields []string
func (_e *MockBlogRepository_Expecter) GetByFilter(ctx interface{}, queryparam interface{}, fields interface{}) *MockBlogRepository_GetByFilter_Call {
	return &MockBlogRepository_GetByFilter_Call{Call: _e.mock.On("GetByFilter", ctx, queryparam, fields)}
}

func (_c *MockBlogRepository_GetByFilter_Call) Run(run func(ctx context.Context, queryparam string, fields []string)) *MockBlogRepository_GetByFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockBlogRepository_GetByFilter_Call) Return(_a0 []*model.BlogPost, _a1 error) *MockBlogRepository_GetByFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlogRepository_GetByFilter_Call) RunAndReturn(run func(context.Context, string, []string) ([]*model.BlogPost, error)) *MockBlogRepository_GetByFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id, fields
func (_m *MockBlogRepository) GetByID(ctx context.Context, id int, fields []string) (*model.BlogPost, error) {
	ret := _m.Called(ctx, id, fields)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *model.BlogPost
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, []string) (*model.BlogPost, error)); ok {
		return rf(ctx, id, fields)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, []string) *model.BlogPost); ok {
		r0 = rf(ctx, id, fields)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.BlogPost)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, []string) error); ok {
		r1 = rf(ctx, id, fields)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlogRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockBlogRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
//   - fields []string
func (_e *MockBlogRepository_Expecter) GetByID(ctx interface{}, id interface{}, fields interface{}) *MockBlogRepository_GetByID_Call {
	return &MockBlogRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id, fields)}
}

func (_c *MockBlogRepository_GetByID_Call) Run(run func(ctx context.Context, id int, fields []string)) *MockBlogRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].([]string))
	})
	return _c
}

func (_c *MockBlogRepository_GetByID_Call) Return(_a0 *model.BlogPost, _a1 error) *MockBlogRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlogRepository_GetByID_Call) RunAndReturn(run func(context.Context, int, []string) (*model.BlogPost, error)) *MockBlogRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Post provides a mock function with given fields: ctx, blog
func (_m *MockBlogRepository) Post(ctx context.Context, blog *model.BlogPost) error {
	ret := _m.Called(ctx, blog)

	if len(ret) == 0 {
		panic("no return value specified for Post")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.BlogPost) error); ok {
		r0 = rf(ctx, blog)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBlogRepository_Post_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Post'
type MockBlogRepository_Post_Call struct {
	*mock.Call
}

// Post is a helper method to define mock.On call
//   - ctx context.Context
//   - blog *model.BlogPost
func (_e *MockBlogRepository_Expecter) Post(ctx interface{}, blog interface{}) *MockBlogRepository_Post_Call {
	return &MockBlogRepository_Post_Call{Call: _e.mock.On("Post", ctx, blog)}
}

func (_c *MockBlogRepository_Post_Call) Run(run func(ctx context.Context, blog *model.BlogPost)) *MockBlogRepository_Post_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.BlogPost))
	})
	return _c
}

func (_c *MockBlogRepository_Post_Call) Return(_a0 error) *MockBlogRepository_Post_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlogRepository_Post_Call) RunAndReturn(run func(context.Context, *model.BlogPost) error) *MockBlogRepository_Post_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, id, updateFn
func (_m *MockBlogRepository) Update(ctx context.Context, id int, updateFn func(*model.BlogPost) (bool, error)) error {
	ret := _m.Called(ctx, id, updateFn)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, func(*model.BlogPost) (bool, error)) error); ok {
		r0 = rf(ctx, id, updateFn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBlogRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockBlogRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
//   - updateFn func(*model.BlogPost)(bool , error)
func (_e *MockBlogRepository_Expecter) Update(ctx interface{}, id interface{}, updateFn interface{}) *MockBlogRepository_Update_Call {
	return &MockBlogRepository_Update_Call{Call: _e.mock.On("Update", ctx, id, updateFn)}
}

func (_c *MockBlogRepository_Update_Call) Run(run func(ctx context.Context, id int, updateFn func(*model.BlogPost) (bool, error))) *MockBlogRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(func(*model.BlogPost) (bool, error)))
	})
	return _c
}

func (_c *MockBlogRepository_Update_Call) Return(_a0 error) *MockBlogRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlogRepository_Update_Call) RunAndReturn(run func(context.Context, int, func(*model.BlogPost) (bool, error)) error) *MockBlogRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBlogRepository creates a new instance of MockBlogRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBlogRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBlogRepository {
	mock := &MockBlogRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
