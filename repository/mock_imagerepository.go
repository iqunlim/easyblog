// Code generated by mockery v2.50.2. DO NOT EDIT.

package repository

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// MockImageRepository is an autogenerated mock type for the ImageRepository type
type MockImageRepository struct {
	mock.Mock
}

type MockImageRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockImageRepository) EXPECT() *MockImageRepository_Expecter {
	return &MockImageRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, fileName
func (_m *MockImageRepository) Delete(ctx context.Context, fileName string) error {
	ret := _m.Called(ctx, fileName)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, fileName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockImageRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockImageRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - fileName string
func (_e *MockImageRepository_Expecter) Delete(ctx interface{}, fileName interface{}) *MockImageRepository_Delete_Call {
	return &MockImageRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, fileName)}
}

func (_c *MockImageRepository_Delete_Call) Run(run func(ctx context.Context, fileName string)) *MockImageRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockImageRepository_Delete_Call) Return(_a0 error) *MockImageRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockImageRepository_Delete_Call) RunAndReturn(run func(context.Context, string) error) *MockImageRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Download provides a mock function with given fields: ctx, fileName
func (_m *MockImageRepository) Download(ctx context.Context, fileName string) (io.ReadCloser, error) {
	ret := _m.Called(ctx, fileName)

	if len(ret) == 0 {
		panic("no return value specified for Download")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (io.ReadCloser, error)); ok {
		return rf(ctx, fileName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) io.ReadCloser); ok {
		r0 = rf(ctx, fileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockImageRepository_Download_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Download'
type MockImageRepository_Download_Call struct {
	*mock.Call
}

// Download is a helper method to define mock.On call
//   - ctx context.Context
//   - fileName string
func (_e *MockImageRepository_Expecter) Download(ctx interface{}, fileName interface{}) *MockImageRepository_Download_Call {
	return &MockImageRepository_Download_Call{Call: _e.mock.On("Download", ctx, fileName)}
}

func (_c *MockImageRepository_Download_Call) Run(run func(ctx context.Context, fileName string)) *MockImageRepository_Download_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockImageRepository_Download_Call) Return(_a0 io.ReadCloser, _a1 error) *MockImageRepository_Download_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockImageRepository_Download_Call) RunAndReturn(run func(context.Context, string) (io.ReadCloser, error)) *MockImageRepository_Download_Call {
	_c.Call.Return(run)
	return _c
}

// Upload provides a mock function with given fields: ctx, fileReader, fileName
func (_m *MockImageRepository) Upload(ctx context.Context, fileReader io.ReadCloser, fileName string) (string, error) {
	ret := _m.Called(ctx, fileReader, fileName)

	if len(ret) == 0 {
		panic("no return value specified for Upload")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, io.ReadCloser, string) (string, error)); ok {
		return rf(ctx, fileReader, fileName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, io.ReadCloser, string) string); ok {
		r0 = rf(ctx, fileReader, fileName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, io.ReadCloser, string) error); ok {
		r1 = rf(ctx, fileReader, fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockImageRepository_Upload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upload'
type MockImageRepository_Upload_Call struct {
	*mock.Call
}

// Upload is a helper method to define mock.On call
//   - ctx context.Context
//   - fileReader io.ReadCloser
//   - fileName string
func (_e *MockImageRepository_Expecter) Upload(ctx interface{}, fileReader interface{}, fileName interface{}) *MockImageRepository_Upload_Call {
	return &MockImageRepository_Upload_Call{Call: _e.mock.On("Upload", ctx, fileReader, fileName)}
}

func (_c *MockImageRepository_Upload_Call) Run(run func(ctx context.Context, fileReader io.ReadCloser, fileName string)) *MockImageRepository_Upload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(io.ReadCloser), args[2].(string))
	})
	return _c
}

func (_c *MockImageRepository_Upload_Call) Return(_a0 string, _a1 error) *MockImageRepository_Upload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockImageRepository_Upload_Call) RunAndReturn(run func(context.Context, io.ReadCloser, string) (string, error)) *MockImageRepository_Upload_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockImageRepository creates a new instance of MockImageRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockImageRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockImageRepository {
	mock := &MockImageRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
